<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.logz.apollo.dao.DeploymentDao">
    <select id="getDeployment" resultType="io.logz.apollo.models.Deployment">
        SELECT *
        FROM deployment
        WHERE id = #{id}
    </select>

    <select id="getAllDeployments" resultType="io.logz.apollo.models.Deployment">
        SELECT *
        FROM deployment
    </select>

    <select id="getAllRunningDeployments" resultType="io.logz.apollo.models.Deployment">
        SELECT *
        FROM deployment
        WHERE status not in ("DONE", "CANCELED")
    </select>

    <select id="getRunningAndJustFinishedDeployments" resultType="io.logz.apollo.models.Deployment">
        SELECT *
        FROM deployment
        WHERE status not in ("DONE", "CANCELED") OR last_update > DATE_SUB(NOW(), INTERVAL 2 HOUR)
    </select>

    <select id="getLatestDeployments" resultType="io.logz.apollo.models.Deployment">
        SELECT *
        FROM deployment
        WHERE last_update > DATE_SUB(NOW(), INTERVAL 12 HOUR)
    </select>

    <select id="getCurrentGitCommitSha" resultType="String">
        SELECT ver.git_commit_sha
        FROM deployment as dep
        JOIN deployable_version as ver ON dep.deployable_version_id = ver.id
        WHERE dep.service_id = #{serviceId} AND dep.environment_id = #{environmentId}
        ORDER BY dep.last_update DESC
        LIMIT 1
    </select>

    <insert id="addDeployment" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO deployment (environment_id, service_id, deployable_version_id, user_email, status, source_version)
        VALUES (#{environmentId}, #{serviceId}, #{deployableVersionId}, #{userEmail}, #{status}, #{sourceVersion})
    </insert>

    <update id="updateDeploymentStatus">
        UPDATE deployment
        SET status=#{status}
        WHERE id=#{id}
    </update>
</mapper>